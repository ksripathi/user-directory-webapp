#+TITLE: The REST API
#+AUTHOR: VLEAD
#+DATE: [2016-05-11 Wed]
#+PROPERTY: results output
#+PROPERTY: exports code
#+SETUPFILE: ../org-templates/level-1.org
#+options: ^:nil
#+LATEX: Literal LaTeX code for export


This document illustrates building of the REST API.
* REST

** Initialization
#+BEGIN_SRC python :tangle ../../src/api.py :eval no

# -*- coding: utf-8 -*-

import os
import csv
import requests
from datetime import datetime
import inspect
from flask import session, render_template, Blueprint, request, jsonify, abort, current_app, redirect, url_for
from config import *
from flask import current_app
import json
from flask import Flask, redirect, url_for
from werkzeug import secure_filename

from db import *
from utils_new import parse_request, jsonify_list
api = Blueprint('APIs', __name__)

system = System()
#+END_SRC

** URL mappping for REST API

|-------------+--------------------+-----------------------|
| METHOD      | FUNCTION           | URL                   |
|-------------+--------------------+-----------------------|
| GET         | get_users          | /users                |
|-------------+--------------------+-----------------------|
| GET         | get_roles          | /roles                |
|-------------+--------------------+-----------------------|
| GET         | get_user_by_id     | /users/<int:id>       |
|-------------+--------------------+-----------------------|
| GET         | get_role_by_id     | /roles/<int:id>       |
|-------------+--------------------+-----------------------|
| POST        | create_user        | /users                |
|-------------+--------------------+-----------------------|
| POST        | create_role        | /roles                |
|-------------+--------------------+-----------------------|
| PUT, DELETE | update_delete_user | /users/<int:id>       |
|-------------+--------------------+-----------------------|
| PUT, DELETE | update_delete_role | /roles/<int:id>       |
|-------------+--------------------+-----------------------|
| GET         | get_user_by_email  | /users/get_email      |
|-------------+--------------------+-----------------------|
| GET         | get_email_of_user  | /users/<int:id>/email |
|-------------+--------------------+-----------------------|
| GET         | get_name_of_user   | /users/<int:id>/name  |
|-------------+--------------------+-----------------------|
| PUT         | change_user_email  | /users/<int:id>email  |
|-------------+--------------------+-----------------------|
| GET         | index              | /                     |
|-------------+--------------------+-----------------------|
| GET, POST   | login              | /auth/login           |
|-------------+--------------------+-----------------------|
| GET         | logout             | /auth/logout          |
|-------------+--------------------+-----------------------|
                                    
** Login/Logout
    These are the REST API methods for login and logout.
    If the user is already logged in then it will redirect to 'user-list.html'
    otherwise it will take a user to 'login.html'.

*** Implementation
#+BEGIN_SRC python :tangle ../../src/api.py
@api.route("/", methods=['GET'])
def index():
    if request.method == 'GET':
        if ('email' in session):
            return render_template("user-list.html")
        else:
            return render_template("login.html")

@api.route("/auth/login", methods=['GET', 'POST'])
def login():

    if request.method == 'POST':
        email = str(request.form['email'])
        data = {'email': email}
        headers = {'Content-type': 'application/json', 'Accept': 'text/plain'}
        url_for_getting_the_user = "%s/auth/login" % \
                                   (APP_URL)
        backend_resp = requests.post(url_for_getting_the_user, data=json.dumps(data), headers=headers)
        user_data = backend_resp.json()
        if str(user_data[0]['status']) == 'success':
            session['email'] = str(user_data[0]['email'])
            session['role_name'] = str(user_data[0]['role'])
            #session['user_id'] = str(user_list[user]['id'])
            return redirect("/")

        else:
            return render_template("login.html", message="Invalid email id")

@api.route('/auth/logout', methods=['GET'])
def logout_handler():
    session.pop('email', None)
    session.pop('role_name', None)   
    return redirect("/")
#+END_SRC

		
* Tests for REST API
** Initialization
#+BEGIN_SRC python :tangle ../../tests/test_api.py :eval no

# -*- coding: utf-8 -*-

import unittest
from flask.ext.testing import TestCase
from datetime import datetime
# import json

from src.db import *
from src.app import create_app
from src.op_exceptions import AttributeRequired
from src.api import system
config = {
    'SQLALCHEMY_DATABASE_URI': ''
}

#+END_SRC

** User Tests
   The setup method creates all the tables and the teardown method deletes the
   tables. These methods are called in the beginning and at the end of the test
   cases, respectively.

*** Initialization
#+BEGIN_SRC python :tangle ../../tests/test_api.py :eval no
class TestUser(TestCase):

    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

#+END_SRC


*** test_get_all_users
    Test case for '/users' ['GET']
    Creates an admin and a user and makes a call to '/users' and hence tests get_all_users().
**** Implementation
#+BEGIN_SRC python :tangle ../../tests/test_api.py :eval no

    def test_get_all_users(self):
        print "test_get_all_users"

        ###Create Users
        role1 = Role("admin")
        role1.save()
        role2 = Role("user")
        role2.save()
        user1 = User(name = "admin user",
                    email = "admin@xyz.com",
                    role=role1)
        user1.save()
        user2 = User(name = "normal user",
                    email="normal@xyz.com",
                    role=role2)
        user2.save()
        r = self.client.get('/users')
        result = json.loads(r.data)
        self.assertEquals(len(result), 2)

#+END_SRC

*** test_get_one_user
     Test case for '/users/<int:id>' ['GET']
     Makes a call to the given route and returns a user, if it is present in
     the user set.
**** Implementation

#+BEGIN_SRC python :tangle ../../tests/test_api.py :eval no

    def test_get_one_user(self):
        print "test_get_one_user"

        ### create a User
        role1 = Role("admin")
        role1.save()
        role2 = Role("user")
        role2.save()

        user1 = User(name = "admin user",
                    email="admin@xyz.com",
                    role=role1)
        user1.save()
        user2 = User(name="normal user",
                    email="normal@xyz.com",
                    role=role2)
        user2.save()

        r = self.client.get('/users/1')
        result = json.loads(r.data)
        self.assertEqual(result['name'], "admin user")

#+END_SRC

*** test_update_existing_user
    Test case for '/users/<int:id>' ['PUT']
    Tests the updating of a particular user.
**** Implementation

#+BEGIN_SRC python :tangle ../../tests/test_api.py :eval no


    def test_update_existing_user(self):
        # Create a user
        # update the same user
        global system
        print "test_update_existing_user"
        role1 = Role("admin")
        role1.save()
        role2 = Role("user")
        role2.save()

        user1 = User(name="admin user",
                     email="admin@xyz.com",
                     role=role1)

        user1.save()
        user2 = User(name="normal user",
                     email="normal@xyz.com",
                     role=role2)

        user2.save()

        system.user_set = []
        system.session_set = []

        system.get_users_from_database()
        admin_user = User.get_by_id(1)
        admin_session = Session(user = admin_user)
        system.session_set.append(admin_session)
        
        
        #for x in system.session_set:
        #    print x.to_client()

        payload = {'email': 'abcdef@gmail.com',
                   'name': 'NEW ADMIN',
                   'role_id': [1],
                   'session': 'admin@xyz.com'}
        headers = {'content-type': 'application/json'}
        response = self.client.put("/users/1",
                                   data=json.dumps(payload),
                                   headers=headers)

        self.assertEqual(response.status_code, 200)

#+END_SRC

*** test_create_new_user
    Test case for '/users' ['POST']
    Tests the creation of a new user, according to the bounds of the
    create_user function.
**** Implementation

#+BEGIN_SRC python :tangle ../../tests/test_api.py :eval no


    def test_create_new_user(self):
        print "test_create_new_user"
        role1 = Role("admin")
        role1.save()
        role2 = Role("user")
        role2.save()

        user1 = User(name = "admin user",
                     email= "admin@xyz.com",
                     role=role1)

        user1.save()
        user2 = User(name="normal user",
                     email="normal@xyz.com",
                     role=role2)

        user2.save()

        payload = {'email': 'ttt@kkk.com',
                   'name': 'nearly normal user',
                   'role': [2],
                   'session': 't@g.com'}

        headers = {'content-type': 'application/json'}

        response = self.client.post("/users",
                                    data=json.dumps(payload),
                                    headers=headers)

        self.assertEqual(response.status_code, 200)


#+END_SRC

*** test_delete_user
    Test case for '/users/<int:id>' [DELETE] 
**** Implementation
#+BEGIN_SRC python :tangle ../../tests/test_api.py :eval no

    def test_delete_user(self):
        global system
        print "test_delete_user"
        role1 = Role("admin")
        role1.save()
        role2 = Role("user")
        role2.save()

        user1 = User(name="admin user",
                     email="admin@xyz.com",
                     role=role1)

        user1.save()
        user2 = User(name="normal user",
                     email="normal@xyz.com",
                     role=role2)

        user2.save()
        
        system.session_set = []
        system.user_set = []

        system.get_users_from_database()
        #s=Session(user=user1)
        system.add_session(user1)

        headers = {'content-type': 'application/json', 'session': 'admin@xyz.com'}

        response = self.client.delete("/users/2", headers=headers)

        self.assertEqual(response.status_code, 200)


#+END_SRC

*** test_create_role
    Test case for '/roles' ['POST']
**** Implementation

#+BEGIN_SRC python :tangle ../../tests/test_api.py :eval no

    def test_create_role(self):
        print "test_create_role"
     

        payload = {'name': 'owner'}

        headers = {'content-type': 'application/json'}

        response = self.client.post("/roles",
                                    data=json.dumps(payload),
                                    headers=headers)

        self.assertEqual(response.status_code, 200)


#+END_SRC 

*** test_update_role
    Test case for '/roles/<int:id>' [PUT]
**** Implementation

#+BEGIN_SRC python :tangle ../../tests/test_api.py :eval no


    def test_update_role(self):
        # Create a user
        # update the same user
        global system
        print "test_update_role"
        role1 = Role("admin")
        role1.save()
        role2 = Role("user")
        role2.save()

        user1 = User(name="admin user",
                     email="admin@xyz.com",
                     role=role1)

        user1.save()
        system.get_users_from_database()
        s=Session(user=user1)
        system.add_session(user1)
        

        payload = {'role': 'owner',
                   'session' : 'admin@xyz.com'
                   }
        headers = {'content-type': 'application/json'}
        response = self.client.put("/roles/2",
                                   data=json.dumps(payload),
                                   headers=headers)

        self.assertEqual(response.status_code, 200)

#+END_SRC

*** test_delete_role
    Test case for '/roles/<int:id>' [DELETE]
**** Implementation
#+BEGIN_SRC python :tangle ../../tests/test_api.py :eval no

    def test_delete_role(self):
        global system
        print "test_delete_role"
        role1 = Role("admin")
        role1.save()
        role2 = Role("user")
        role2.save()

        user1 = User(name="admin user",
                     email="admin@xyz.com",
                     role=role1)

        user1.save()
        system.get_users_from_database()
     
        
        s=Session(user=user1)
        system.add_session(user1)
        payload = {'session': 'admin@xyz.com'}

        headers = {'content-type': 'application/json'}

        response = self.client.delete("/roles/2",
                                      data=json.dumps(payload),
                                      headers=headers)

        self.assertEqual(response.status_code, 200)


#+END_SRC

*** test_get_user_by_email
    Test case for '/roles/<int:id>' [GET]
**** Implementation
#+BEGIN_SRC python :tangle ../../tests/test_api.py :eval no

    def test_get_user_by_email(self):
        print "test_get_user_by_email"

        ###Create Users
        role1 = Role("admin")
        role1.save()
        role2 = Role("user")
        role2.save()
        user1 = User(name = "admin user",
                    email = "admin@xyz.com",
                    role=role1)
        user1.save()
        user2 = User(name = "normal user",
                    email="normal@xyz.com",
                    role=role2)
        user2.save()
        
        system.user_set = []
        system.session_set = []

        system.get_users_from_database()

        payload = { 'email' : 'normal@xyz.com' }

        
        headers = {'content-type': 'application/json'}
        response = self.client.get("/users/get_email",
                                   data=json.dumps(payload),
                                   headers=headers)
        result = json.loads(response.data)
        self.assertEquals(result['email'], user2.email)

#+END_SRC


*** test_get_email_of_user
    Test case for '/users/<int:id>/email'
**** Implementation
#+BEGIN_SRC python :tangle ../../tests/test_api.py :eval no

    def test_get_email_of_user(self):
        print "test_get_email_of_user"

        ###Create Users
        role1 = Role("admin")
        role1.save()
        role2 = Role("user")
        role2.save()
        user1 = User(name = "admin user",
                    email = "admin@xyz.com",
                    role=role1)
        user1.save()
        user2 = User(name = "normal user",
                    email="normal@xyz.com",
                    role=role2)
        user2.save()
        
        system.user_set = []
        system.session_set = []

        system.get_users_from_database()
        system.add_session(user1)
        payload = { 'session' : 'admin@xyz.com' }

        
        headers = {'content-type': 'application/json'}
        response = self.client.get("/users/2/email",
                                   data=json.dumps(payload),
                                   headers=headers)
        result = json.loads(response.data)
        self.assertEquals(result['email'], user2.email)

#+END_SRC

*** test_get_name_of_user
    Test case for '/users/<int:id>/name'
**** Implementation
#+BEGIN_SRC python :tangle ../../tests/test_api.py :eval no

    def test_get_name_of_user(self):
        print "test_get_name_of_user"

        ###Create Users
        role1 = Role("admin")
        role1.save()
        role2 = Role("user")
        role2.save()
        user1 = User(name = "admin user",
                    email = "admin@xyz.com",
                    role=role1)
        user1.save()
        user2 = User(name = "normal user",
                    email="normal@xyz.com",
                    role=role2)
        user2.save()
        
        system.user_set = []
        system.session_set = []

        system.get_users_from_database()
        system.add_session(user1)
        payload = { 'session' : 'admin@xyz.com' }

        
        headers = {'content-type': 'application/json'}
        response = self.client.get("/users/2/name",
                                   data=json.dumps(payload),
                                   headers=headers)
        result = json.loads(response.data)
        self.assertEquals(result['name'], user2.name)

#+END_SRC


*** test_set_email_of_user
    Test case for '/users/<int:id>/email'
**** Implementation
#+BEGIN_SRC python :tangle ../../tests/test_api.py :eval no

    def test_set_email_of_user(self):
        print "test_set_email_of_user"

        ###Create Users
        role1 = Role("admin")
        role1.save()
        role2 = Role("user")
        role2.save()
        user1 = User(name = "admin user",
                    email = "admin@xyz.com",
                    role=role1)
        user1.save()
        user2 = User(name = "normal user",
                    email="normal@xyz.com",
                    role=role2)
        user2.save()
        
        system.user_set = []
        system.session_set = []

        system.get_users_from_database()
        system.add_session(user1)
        payload = { 'session' : 'admin@xyz.com',
                    'email' : 'abcd@xyz.com'
                    }
        
        headers = {'content-type': 'application/json'}
        response = self.client.put("/users/2/email",
                                   data=json.dumps(payload),
                                   headers=headers)
        result = json.loads(response.data)
        self.assertEquals(result['email'], "abcd@xyz.com")

#+END_SRC

	
** Run Tests
#+BEGIN_SRC python :tangle ../../tests/test_api.py :eval no

if __name__ == '__main__':
    unittest.main()
#+END_SRC
